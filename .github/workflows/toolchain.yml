name: toolchain

on:
  schedule:
    - cron: 0 17 * * 1
  repository_dispatch:
  workflow_dispatch:

env:
  DIY_P1_SH: sh/op.sh

jobs:
  build_firmware:
    name: 编译固件 - ${{ matrix.device }} - ${{ matrix.source }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        device: ["rax3000m-emmc"]
        source: ["openwrt"]
        include:
          - device: "rax3000m-emmc"
            config: "CONFIG_TARGET_mediatek_filogic_DEVICE_cmcc_rax3000m-emmc=y"


    steps: 
    - name: 检查分支
      uses: actions/checkout@v4

    - name: 释放磁盘空间
      run: |
        sudo rm -rf /etc/apt/sources.list.d
        sudo swapoff -a
        sudo rm -f /swapfile /mnt/swapfile
        sudo docker image prune -a -f
        sudo systemctl stop docker
        sudo snap set system refresh.retain=2
        sudo apt-get -y purge firefox clang* ghc* google* llvm* mono* mongo* mysql* php*
        sudo apt-get -y autoremove --purge
        sudo apt-get clean
        sudo rm -rf /etc/mysql /etc/php /usr/lib/jvm /usr/libexec/docker /usr/local /usr/src/* /var/lib/docker /var/lib/gems /var/lib/mysql /var/lib/snapd /etc/skel /opt/{microsoft,az,hostedtoolcache,cni,mssql-tools,pipx} /usr/share/{az*,dotnet,swift,miniconda,gradle*,java,kotlinc,ri,sbt} /root/{.sbt,.local,.npm}
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        rm -rf ~/{.cargo,.dotnet,.rustup}
        df -Th

    - name: 编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get install -y tar img2simg build-essential flex bison cmake g++ gawk gcc-multilib g++-multilib gettext git libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply python3-distutils python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils haveged scons libpython3-dev rename qemu-utils
        sudo apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        sudo timedatectl set-timezone 'Asia/Shanghai'
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        df -Th

    - name: 设置环境变量
      run: |
        TAG="$(date +'%Y%m%d')"
        echo "tag=$TAG" >> $GITHUB_ENV
        echo "OP_IP=${{ github.event.inputs.OP_IP }}" >> $GITHUB_ENV
        echo "OP_author=${{ github.event.inputs.OP_author }}" >> $GITHUB_ENV
        echo "CUSTOM_PLUGINS=${{ github.event.inputs.CUSTOM_PLUGINS }}" >> $GITHUB_ENV
        echo "DEVICE_NAME=${{ matrix.device }}" >> $GITHUB_ENV
        echo "SOURCE_NAME=${{ matrix.source }}" >> $GITHUB_ENV
        echo "OP_SFE=true" >> $GITHUB_ENV
        
        # 设置不同源码仓库的变量
        if [ "${{ matrix.source }}" = "openwrt" ]; then
          echo "REPO_URL=https://github.com/openwrt/openwrt" >> $GITHUB_ENV
          echo "REPO_BRANCH=openwrt-24.10" >> $GITHUB_ENV
        else
          echo "REPO_URL=https://github.com/immortalwrt/immortalwrt" >> $GITHUB_ENV
          echo "REPO_BRANCH=openwrt-24.10" >> $GITHUB_ENV
        fi

    - name: 克隆源代码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL $SOURCE_NAME
        ln -sf /workdir/$SOURCE_NAME $GITHUB_WORKSPACE/$SOURCE_NAME
        
    - name: 切换分支
      run: |
        cd $SOURCE_NAME
        case $REPO_BRANCH in
          openwrt-24.10)
            _release_tag=$(git tag --sort=taggerdate --list 'v24.*' | tail -1)
            git checkout $_release_tag
            _prerelease=false
            ;;
          openwrt-23.05)
            _release_tag=$(git tag --sort=taggerdate --list 'v23.*' | tail -1)
            git checkout $_release_tag
            _prerelease=false
            ;;
          *)
            echo "Can't get local/upstream's branch/tags"
            ;;
        esac
        echo "release_tag=$_release_tag" >> $GITHUB_ENV
        
            
    - name: patch修补
      run: |
        set -x
        rm -rf $SOURCE_NAME/package/kernel/linux/modules/[a-z]*.mk
        [ -e patch ] && cp -rf patch/kernel-6.12/modules/*.mk $SOURCE_NAME/package/kernel/linux/modules
        [ -e tags ] && cp -rf tags/kernel-6.12 $SOURCE_NAME/include
        rm -rf $SOURCE_NAME/target/linux/generic
        rm -rf $SOURCE_NAME/package/target/linux/mediatek
        [ -e patch ] && cp -rf patch/target $SOURCE_NAME
        [ -e patch ] && cp -rf patch/Config-kernel.in $SOURCE_NAME/config
        if [ "${{ matrix.source }}" = "openwrt" ]; then
          sed -i 's#https://git\.openwrt\.org/feed#https://github.com/openwrt#g; s#https://git\.openwrt\.org/project#https://github.com/openwrt#g' $SOURCE_NAME/feeds.conf.default
        fi
        if [ "${{ matrix.source }}" = "immortalwrt" ]; then
          rm -rf $SOURCE_NAME/package/network/config/firewall4/patches
          rm -rf $SOURCE_NAME/package/network/utils/nftables/patches
          rm -rf $SOURCE_NAME/package/libs/libnftnl/patches
          rm -rf $SOURCE_NAME/package/emortal/default-settings
          [ -e patch ] && cp -rf patch/default-settings $SOURCE_NAME/package/emortal
        fi
        cd $SOURCE_NAME
        ./scripts/feeds update -a
        cd .. 
        [ -e patch ] && cp -rf patch/firewall4/100-openwrt-firewall4-add-custom-nft-command-support.patch $SOURCE_NAME
        [ -e patch ] && cp -rf patch/firewall4/luci-24.10/*.patch $SOURCE_NAME/feeds/luci 
        [ -e patch ] && cp -rf patch/luci/*.patch $SOURCE_NAME/feeds/luci
        [ -e patch ] && cp -rf patch/iproute2/*.patch openwrt/package/network/utils/iproute2/patches
        [ -e patch ] && cp -rf patch/openssl/quic/*.patch $SOURCE_NAME/package/libs/openssl/patches
        mkdir -p $SOURCE_NAME/package/network/services/odhcpd/patches       
        if [ "${{ matrix.source }}" = "openwrt" ]; then
          [ -e patch ] && cp -rf patch/automount $SOURCE_NAME/package
          [ -e patch ] && cp -rf patch/autocore-arm $SOURCE_NAME/package
          [ -e patch ] && cp -rf patch/odhcpd/*.patch $SOURCE_NAME/package/network/services/odhcpd/patches
        fi
        
    - name: 加载自定义脚本
      run: |
        chmod +x $DIY_P1_SH
        cd $SOURCE_NAME
        $GITHUB_WORKSPACE/$DIY_P1_SH
        cd ..
        [ -e patch ] && cp -rf patch/nginx/luci.locations $SOURCE_NAME/feeds/packages/net/nginx/files-luci-support
        [ -e patch ] && cp -rf patch/nginx/openwrt-24.10-uci.conf.template $SOURCE_NAME/feeds/packages/net/nginx-util/files
        [ -e patch ] && cp -rf patch/turboacc $SOURCE_NAME/package/turboacc/luci-app-turboacc/root/etc/config
       
    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files $SOURCE_NAME/files
        cat <<EOF >>$SOURCE_NAME/.config
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_KERNEL_PREEMPT_RT=y
        ${{ matrix.config }}
        CONFIG_PACKAGE_dnsmasq-full=y
        CONFIG_PACKAGE_dnsmasq_full_ipset=y
        # CONFIG_PACKAGE_dnsmasq_full_broken_rtc is not set
        # CONFIG_PACKAGE_dnsmasq is not set
        EOF
                
    
    - name: 下载编译依赖
      id: package
      run: |
        cd $SOURCE_NAME
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: 编译源码
      id: compile
      run: |
        cd $SOURCE_NAME
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
 
    - name: 清理缓存
      id: organize
      run: |
        cd $SOURCE_NAME
        make clean

    - name: 缓存 staging_dir
      uses: actions/cache@v4
      with:
        path: |
          ${{ matrix.source }}/staging_dir
        key: ${{ matrix.source }}-toolchain-cache
        restore-keys: |
          ${{ matrix.source }}-toolchain-cache